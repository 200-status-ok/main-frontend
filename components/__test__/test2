import { render, screen, waitFor } from "@testing-library/react";
import { http } from "../../http-services/http"; // You may need to mock this or use a library like `msw` for API mocking
import Poster from "../../pages/poster/[poster_id]";
import axios from "axios";
import AuthProvider from "../../context/AuthProvider";
import mockRouter from "next-router-mock";

// Mock the axios module to avoid actual network requests during tests
// jest.mock("../../http-services/http");
jest.mock("axios");

jest.mock("next/router", () => ({
  useRouter: () => ({
    query: {
      poster_id: 3,
    },
    pathname: "chat",
  }),
}));
jest.mock("swiper/react", () => ({
  Swiper: ({ children }) => <div>{children}</div>,
  SwiperSlide: ({ children }) => <div>{children}</div>,
  useSwiper: () => ({
    swiper: {
      slideNext: () => {},
    },
  }),
}));
jest.mock("swiper", () => ({
  Pagination: ({ children }) => <div>{children}</div>,
  Navigation: ({ children }) => <div>{children}</div>,
}));
const MyContextProvider = () => {
  return (
    <AuthProvider>
      <Poster />
    </AuthProvider>
  );
};
describe("Posters component", () => {
  it("renders poster correctly", async () => {
    // Mock the data returned from the API
    console.log("dd");
    axios.get.mockResolvedValue({
      id: 3,
      title: "عروسک",
      status: "lost",
      description: " من یک عروسک با رنگ بژ گم کرده ام ",
      telegram_id: "",
      user_phone: "09030335008",
      addresses: [
        {
          id: 3,
          created_at: "2023-11-13T23:54:46.19134Z",
          updated_at: "2023-11-13T23:54:46.19134Z",
          deleted_at: null,
          province: "تهران",
          city: "تهران",
          address_detail: "آبشار",
          latitude: 35.67898520169536,
          longitude: 51.443926715252665,
          address_id: 3,
        },
      ],
      images: [
        {
          id: 3,
          created_at: "2023-11-13T23:54:46.189611Z",
          updated_at: "2023-11-13T23:54:46.189611Z",
          deleted_at: null,
          url: "https://main-bucket.s3.ir-thr-at1.arvanstorage.ir/20231113_235424_24eb6f84a53a6046.jpg",
          poster_id: 3,
        },
      ],
      tags: [
        {
          id: 4,
          created_at: "2023-11-13T23:54:46.175904Z",
          updated_at: "2023-11-13T23:54:46.175904Z",
          deleted_at: null,
          name: "عروسک",
          state: "accepted",
          posters: null,
        },
      ],
      user_id: 2,
      award: 0,
      created_at: "2023-11-13T23:54:46.184783Z",
      updated_at: "2023-11-13T23:54:46.184075Z",
      state: "accepted",
      special_type: "normal",
    });

    render(<MyContextProvider />);
    screen.debug();

    // Wait for the API call to complete and check if posters are rendered
    await waitFor(() => {
      expect(screen.getByText("عروسک")).toBeInTheDocument();
      // Add more assertions based on your component's structure
    });
  });

  // Add more tests as needed for other functionality in your component
});
